table(data1$Grade)
table(data1$Grade)
table(data1$Grade,data1$Demographic)
names(data1)
names(data1)[1]
names(data1)[1]<-"Grade"
data1 <- read.csv('datasets/dataset1.csv',head=TRUE,sep =',')
data1
#data1 <- read.table(file.choose(),header = T,sep = '\t')
names(data1)
data1 <- read.csv('datasets/dataset1.csv',head=TRUE,sep =',')
data1
data1 <- read.csv('datasets/dataset1.csv',head=TRUE,sep =',')
#data1 <- read.table(file.choose(),header = T,sep = ',')
names(data1)
head(data1)
tail(data1)
str(data1)
data1 <- read.csv('datasets/dataset1.csv',head=TRUE,sep =',')
data1
table(data1$Grade,data1$Demographic)
summary(data1)
reg1 <- lm(data1$Mean.Scale.Score ~data1$Number.Tested)
reg1
#data1 <- read.table(file.choose(),header = T,sep = ',')
names(data1)[2]
tail(data1)
cor(data1$Number.Tested,data1$Mean.Scale.Score)
boxplot(data1$Mean.Scale.Score~data1$Demographic)
summary(data1)
sd(data1)
---
title: "Overview"
output:
html_document:
theme: cosmo
editor_options:
chunk_output_type: console
---
![](dr.jpg)
---
title: "Overview"
output:
html_document:
theme: cosmo
editor_options:
chunk_output_type: console
---
![test](dr.jpg)
---
title: "Overview"
output:
html_document:
theme: cosmo
editor_options:
chunk_output_type: console
---
![test](/dr.jpg)
---
title: "Overview"
output:
html_document:
theme: cosmo
editor_options:
chunk_output_type: console
---
![test](figures/dr.jpg)
---
title: "Overview"
output:
html_document:
theme: cosmo
editor_options:
chunk_output_type: console
---
![test](figures/dr.jpg,fig.align = 'center')
knitr::include_graphics(figures/dr.jpg)
knitr::include_graphics('figures/dr.jpg')
knitr::include_graphics('figures/dr.jpg')
knitr::include_graphics('figures/dr.jpg')
pow <- function(x,y){
result <- x^y
print(paste(x,"raised to the power",y,"is",result))
}
pow(8,2)
pow(2,4)
div <- function(x,y){
if(y==0){
return(print("Denominator cannot be 0"))
}
else{
result <- x/y
return(result)
}
}
div(10,2)
div(x=10,y=0)
multi_return <- function(x,y){
res1 <- x+y
res2 <- x-y
res3 <- x*y
result <- c(A=res1,B=res2,C=res3)
return(result)
}
multi_return(3,5)
output <- multi_return(3,9)
output
output["A","B"]
output <- multi_return(3,9)
output
output["A"]
output <- multi_return(3,9)
output
output["A"]
output[c("A","C")]
plot(x,y)
# Create two sets of random number
x <- rnorm(10)
y <- rnorm(10)
plot(x,y)
plot(x,y)
plot(y~x)
plot(x,y)
plot(y~x)
library(deSolve)
library(bbmle)
source('script1.R')
func1(10,2)
func2(10,0)
func2(10,5)
vec1
source('scripts/script1.R')
func1(10,2)
func2(10,0)
func2(10,5)
vec1
rmarkdown::render_site()
(999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
parameters_values <- c(
beta  = 0.004, # infectious contact rate (/person/day)
gamma = 0.5    # recovery rate (/day)
)
(999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
r0 <- (999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
r0
r0 <- (999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
r0
parameters_values["beta"]
parameters_values["gamma"]
r0 <- (999 + 1) * (parameters_values["beta"]/parameters_values["gamma"])
r0
(999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
(999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
parameters_values
parameters_values["beta"]
parameters_values["beta"]/parameters_values["gamma"]
unlist(parameters_values["beta"]/parameters_values["gamma"])
names(parameters_values["beta"]/parameters_values["gamma"])
names(parameters_values["beta"]/parameters_values["gamma"])<-''
names(parameters_values["beta"]/parameters_values["gamma"])<-R0
names(parameters_values["beta"]/parameters_values["gamma"])<-'R0'
names(parameters_values["beta"]/parameters_values["gamma"]) <-'R0'
names(parameters_values["beta"]/parameters_values["gamma"]) ='R0'
beta <- parameters_values["beta"]
gamma <- parameters_values["beta"]/parameters_values["gamma"]
(999 + 1) * beta/gamma
(999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
(999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
(999 + 1) * parameters_values["beta"]/parameters_values["gamma"]
(999 + 1) * 0.04/0.5
knitr::include_graphics('figures/sir.png')
library(deSolve)
sir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -beta * I * S
dI <-  beta * I * S - gamma * I
dR <-  gamma * I
return(list(c(dS, dI, dR)))
})
}
parameters_values <- c(
beta  = 0.004, # infectious contact rate (/person/day)
gamma = 0.5    # recovery rate (/day)
)
initial_values <- c(
S = 999,  # number of susceptibles at time = 0
I =   1,  # number of infectious at time = 0
R =   0   # number of recovered (and immune) at time = 0
)
time_values <- seq(0,10) #days
ls()
sir_equations
parameters_values
initial_values
time_values
sir_values_1 <- ode(
y = initial_values,
times = time_values,
func = sir_equations,
parms = parameters_values
)
sir_values_1
sir_values_1 <- as.data.frame(sir_values_1)
sir_values_1
with(sir_values_1, {
# plotting the time series of susceptibles:
plot(time, S, type = "l", col = "blue",
xlab = "time (days)", ylab = "number of people")
# adding the time series of infectious:
lines(time, I, col = "red")
# adding the time series of recovered:
lines(time, R, col = "green")
})
# adding a legend:
legend("right", c("susceptibles", "infectious", "recovered"),
col = c("blue", "red", "green"), lty = 1, bty = "n")
(999 + 1) * 0.004/0.5
(999 + 1) * parameters_values["beta"] / parameters_values["gamma"]
(999 + 1) * parameters_values["beta"] / parameters_values["gamma"]
(999 + 1) * 0.004/0.5
(999 + 1) * 0.004/0.5
install.packages("epimdr")
data(flu)
library(epimdr)
data(flu)
data(flu)
flu
flu
install.packages("epimdr")
install.packages("epimdr")
library(epimdr)
flu <- data(flu)
library(epimdr)
flu <- data(flu)
library(epimdr)
flu <- data(flu)
flu
data(flu)
flu
flu
flu
flu
library(epimdr)
flu <- data(flu)
flu
library(epimdr)
data(flu)
library(epimdr)
flu
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
predictions <- sir_1(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$day)
sir_1 <- function(beta, gamma, S0, I0, R0, times) {
require(deSolve) # for the "ode" function
# the differential equations:
sir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -beta * I * S
dI <-  beta * I * S - gamma * I
dR <-  gamma * I
return(list(c(dS, dI, dR)))
})
}
# the parameters values:
parameters_values <- c(beta  = beta, gamma = gamma)
# the initial values of variables:
initial_values <- c(S = S0, I = I0, R = R0)
# solving
out <- ode(initial_values, times, sir_equations, parameters_values)
# returning the output:
as.data.frame(out)
}
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
predictions <- sir_1(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$day)
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
predictions <- sir_1(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$day)
with(predictions,lines(time,I,col="red"))
model_fit <- function(beta, gamma, data, N = 763, ...) {
I0 <- data$cases[1] # initial number of infected (from data)
times <- data$day   # time points (from data)
# model's predictions:
predictions <- sir_1(beta = beta, gamma = gamma,   # parameters
S0 = N - I0, I0 = I0, R0 = 0, # variables' intial values
times = times)                # time points
# plotting the observed prevalences:
with(data, plot(day, cases, ...))
# adding the model-predicted prevalence:
with(predictions, lines(time, I, col = "red"))
}
model_fit(beta = 0.004, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
model_fit(beta = 0.004, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
model_fit(beta = 0.05, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
model_fit(beta = 0.0005, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
model_fit(beta = 0.005, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
model_fit(beta = 0.006, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
model_fit(beta = 0.003, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
sum((predictions$I - flu$cases)^2)
# the observed prevalences:
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
# the model-predicted prevalences:
with(predictions, lines(time, I, col = "red", type = "o"))
# the "errors":
segments(flu$day, flu$cases, predictions$time, predictions$I)
ss(beta = 0.004, gamma = 0.5)
starting_param_val <- list(beta = 0.004, gamma = 0.5)
estimates_pois <- mle2(minuslogl = mLL_pois,
start = lapply(starting_param_val, log),
data = c(flu, N = 763))
starting_param_val <- list(beta = 0.0004, gamma = 0.5)
estimates_pois <- mle2(minuslogl = mLL_pois,
start = lapply(starting_param_val, log),
data = c(flu, N = 763))
#install.packages("epimdr")
flu <- read.table("Materials\flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("Materials\flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("\Materials\flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table(Materials\flu.txt, header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("https://raw.githubusercontent.com/choisy/DMo2019/master/data/flu.txt", header = TRUE)
# library(epimdr)
flu
#install.packages("epimdr")
flu <- read.table("./master/data/flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("./Materials/flu.txt", header = TRUE)
#install.packages("epimdr")
flu <- read.table("./Materials/flu.txt", header = TRUE)
})
sir_1 <- function(beta, gamma, S0, I0, R0, times) {
require(deSolve) # for the "ode" function
# the differential equations:
sir_equations <- function(time, variables, parameters) {
with(as.list(c(variables, parameters)), {
dS <- -beta * I * S
dI <-  beta * I * S - gamma * I
dR <-  gamma * I
return(list(c(dS, dI, dR)))
})
}
# the parameters values:
parameters_values <- c(beta  = beta, gamma = gamma)
# the initial values of variables:
initial_values <- c(S = S0, I = I0, R = R0)
# solving
out <- ode(initial_values, times, sir_equations, parameters_values)
# returning the output:
as.data.frame(out)
}
#install.packages("epimdr")
flu <- read.table("./Materials/flu.txt", header = TRUE)
# library(epimdr)
flu
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
predictions <- sir_1(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$day)
with(predictions,lines(time,I,col="red"))
model_fit <- function(beta, gamma, data, N = 763, ...) {
I0 <- data$cases[1] # initial number of infected (from data)
times <- data$day   # time points (from data)
# model's predictions:
predictions <- sir_1(beta = beta, gamma = gamma,   # parameters
S0 = N - I0, I0 = I0, R0 = 0, # variables' intial values
times = times)                # time points
# plotting the observed prevalences:
with(data, plot(day, cases, ...))
# adding the model-predicted prevalence:
with(predictions, lines(time, I, col = "red"))
}
model_fit(beta = 0.004, gamma = 0.5, flu, pch = 19, col = "red", ylim = c(0, 600))
predictions <- sir_1(beta = 0.004, gamma = 0.5, S0 = 999, I0 = 1, R0 = 0, times = flu$day)
predictions
flu
sum((predictions$I - flu$cases)^2)
# the observed prevalence:
with(flu, plot(day, cases, pch = 19, col = "red", ylim = c(0, 600)))
# the model-predicted prevalence:
with(predictions, lines(time, I, col = "red", type = "o"))
# the "errors":
segments(flu$day, flu$cases, predictions$time, predictions$I)
ss <- function(beta, gamma, data = flu, N = 763) {
I0 <- data$cases[1]
times <- data$day
predictions <- sir_1(beta = beta, gamma = gamma,   # parameters
S0 = N - I0, I0 = I0, R0 = 0, # variables' intial values
times = times)                # time points
sum((predictions$I[-1] - data$cases[-1])^2)
}
ss(beta = 0.004, gamma = 0.5)
beta_val <- seq(from = 0.0016, to = 0.004, le = 100)
ss_val <- sapply(beta_val, ss, gamma = 0.5)
min_ss_val <- min(ss_val)
min_ss_val
beta_hat <- beta_val[ss_val == min_ss_val]
beta_hat
plot(beta_val, ss_val, type = "l", lwd = 2,
xlab = expression(paste("infectious contact rate ", beta)),
ylab = "sum of squares")
# adding the minimal value of the sum of squares:
abline(h = min_ss_val, lty = 2, col = "grey")
# adding the estimate of beta:
abline(v = beta_hat, lty = 2, col = "grey")
gamma_val <- seq(from = 0.4, to = 0.575, le = 100)
ss_val <- sapply(gamma_val, function(x) ss(beta_hat, x))
(min_ss_val <- min(ss_val))
(gamma_hat <- gamma_val[ss_val == min_ss_val])
plot(gamma_val, ss_val, type = "l", lwd = 2,
xlab = expression(paste("recovery rate ", gamma)),
ylab = "sum of squares")
abline(h = min_ss_val, lty = 2, col = "grey")
abline(v = gamma_hat, lty = 2, col = "grey")
n <- 10 # number of parameter values to try
beta_val <- seq(from = 0.002, to = 0.0035, le = n)
gamma_val <- seq(from = 0.3, to = 0.65, le = n)
param_val <- expand.grid(beta_val, gamma_val)
ss_val <- with(param_val, Map(ss, Var1, Var2))
ss_val <- matrix(unlist(ss_val), n)
persp(beta_val, gamma_val, -ss_val, theta = 40, phi = 30,
xlab = "beta", ylab = "gamma", zlab = "-sum of squares")
n <- 30 # number of parameters values
beta_val <- seq(from = 0.002, to = 0.0035, le = n)
gamma_val <- seq(from = 0.3, to = 0.65, le = n)
# calculating the sum of squares:
param_val <- expand.grid(beta_val, gamma_val)
ss_val <- with(param_val, Map(ss, Var1, Var2))
ss_val <- unlist(ss_val)
# minimum sum of squares and parameters values:
(ss_min <- min(ss_val))
ind <- ss_val == ss_min
(beta_hat <- param_val$Var1[ind])
(gamma_hat <- param_val$Var2[ind])
# visualizing the sum of squares profile:
ss_val <- matrix(ss_val, n)
image(beta_val, gamma_val, ss_val,
xlab = expression(paste("infectious contact rate ", beta, " (/person/day)")),
ylab = expression(paste("recovery rate ", gamma, " (/day)")))
contour(beta_val, gamma_val,ss_val, add = TRUE)
points(beta_hat, gamma_hat, pch = 3)
box(bty = "o")
ss(beta = 0.004, gamma = 0.5)
ss2 <- function(x) {
ss(beta = x[1], gamma = x[2])
}
ss2(c(0.004, 0.5))
starting_param_val <- c(0.004, 0.5)
ss_optim <- optim(starting_param_val, ss2)
ss_optim
ss_optim$value
ss_optim$par
mLL <- function(beta, gamma, sigma, day, cases, N = 763) {
beta <- exp(beta) # to make sure that the parameters are positive
gamma <- exp(gamma)
sigma <- exp(sigma)
I0 <- cases[1] # initial number of infectious
observations <- cases[-1] # the fit is done on the other data points
predictions <- sir_1(beta = beta, gamma = gamma,
S0 = N - I0, I0 = I0, R0 = 0, times = day)
predictions <- predictions$I[-1] # removing the first point too
# returning minus log-likelihood:
-sum(dnorm(x = observations, mean = predictions, sd = sigma, log = TRUE))
}
library(bbmle) # for "mle2", "coef", "confint", "vcov", "logLik", "profile", "summary", "plot.profile.mle2"
starting_param_val <- list(beta = 0.004, gamma = 0.5, sigma = 1)
estimates <- mle2(minuslogl = mLL, start = lapply(starting_param_val, log),
method = "Nelder-Mead", data = c(flu, N = 763))
summary(estimates)
exp(coef(estimates))
exp(confint(estimates))
vcov(estimates)
-logLik(estimates)
prof <- profile(estimates)
rmarkdown::render_site()
rmarkdown::render_site()
#install.packages("epimdr")
flu <- read.table("https://raw.githubusercontent.com/wenhao0117/DMo_2021/main/Materials/flu.txt", header = TRUE)
knitr::include_graphics('figures/basic_stats.png')
knitr::include_graphics('/figures/basic_stats.png')
knitr::include_graphics('figures/basic_stats.png')
data1 <- read.csv('datasets/dataset1.csv',head=TRUE,sep =',')
data1 <- read.csv('https://raw.githubusercontent.com/wenhao0117/DMo_2021/main/datasets/dataset1.csv',head=TRUE,sep=',')
#data1 <- read.table(file.choose(),header = T,sep = ',')
names(data1)
head(data1)
tail(data1)
str(data1)
data1 <- read.csv('https://raw.githubusercontent.com/wenhao0117/DMo_2021/main/datasets/dataset1.csv',head=TRUE,sep=',')
names(data1)
head(data1)
tail(data1)
str(data1)
read.table("https://raw.githubusercontent.com/wenhao0117/DMo_2021/main/Materials/gr2.txt",header=T,sep='\t')
#read.table(file.choose(),header = T,sep = '\t')
read.delim("https://raw.githubusercontent.com/wenhao0117/DMo_2021/main/Materials/gr2.txt")
